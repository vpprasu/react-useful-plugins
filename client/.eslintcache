[{"D:\\temple\\client\\src\\index.js":"1","D:\\temple\\client\\src\\reportWebVitals.js":"2","D:\\temple\\client\\src\\App.js":"3","D:\\temple\\client\\src\\containers\\layout\\layout.jsx":"4","D:\\temple\\client\\src\\reducers\\rootReducer.js":"5","D:\\temple\\client\\src\\reducers\\familyInfo.js":"6","D:\\temple\\client\\src\\reducers\\userVazhippad.js":"7","D:\\temple\\client\\src\\reducers\\vazhippad.js":"8","D:\\temple\\client\\src\\actions\\types.js":"9","D:\\temple\\client\\src\\containers\\userVazhippad\\userVazhippad.jsx":"10","D:\\temple\\client\\src\\containers\\familyInfo\\familyInfo.jsx":"11","D:\\temple\\client\\src\\containers\\vazhippad\\vazhippad.jsx":"12","D:\\temple\\client\\src\\components\\userVazhippad\\addUserVazhippad.jsx":"13","D:\\temple\\client\\src\\components\\userVazhippad\\listUserVazhippad.jsx":"14","D:\\temple\\client\\src\\components\\userVazhippad\\editUserVazhippad.jsx":"15","D:\\temple\\client\\src\\components\\vazhippad\\listVazhippad.jsx":"16","D:\\temple\\client\\src\\components\\vazhippad\\addVazhippad.jsx":"17","D:\\temple\\client\\src\\components\\vazhippad\\editVazhippad.jsx":"18","D:\\temple\\client\\src\\components\\familyInfo\\editFamilyInfo.jsx":"19","D:\\temple\\client\\src\\components\\familyInfo\\listFamilyInfo.jsx":"20","D:\\temple\\client\\src\\components\\familyInfo\\addFamilyInfo.jsx":"21","D:\\temple\\client\\src\\actions\\userVazhippad.js":"22","D:\\temple\\client\\src\\axiosConfig.js":"23","D:\\temple\\client\\src\\actions\\vazhippad.js":"24","D:\\temple\\client\\src\\actions\\familyInfo.js":"25","D:\\temple\\client\\src\\containers\\fullComponents\\fullComponents.jsx":"26","D:\\temple\\client\\src\\containers\\table\\serverTable.jsx":"27","D:\\temple\\client\\src\\containers\\table\\table.js":"28","D:\\temple\\client\\src\\containers\\table\\search.js":"29","D:\\temple\\client\\src\\containers\\reduxSaga\\reduxSaga.jsx":"30","D:\\temple\\client\\src\\saga\\rootSaga.js":"31","D:\\temple\\client\\src\\saga\\handlers\\user.js":"32","D:\\temple\\client\\src\\saga\\requests\\user.js":"33","D:\\temple\\client\\src\\actions\\userSaga.js":"34","D:\\temple\\client\\src\\reducers\\userSaga.js":"35","D:\\temple\\client\\src\\containers\\fileUpload\\fileUpload.jsx":"36","D:\\temple\\client\\src\\containers\\serverAgGrid\\serverAgGrid.jsx":"37","D:\\temple\\client\\src\\containers\\serverAgGrid\\serverAgGrid2.jsx":"38","D:\\temple\\client\\src\\containers\\useMemo\\useMemoHook.jsx":"39","D:\\temple\\client\\src\\containers\\useCallback\\useCallbackHook.jsx":"40","D:\\temple\\client\\src\\containers\\useCallback\\listMultiply.jsx":"41","D:\\temple\\client\\src\\containers\\muiReactHookForm\\muiReactHookForm.jsx":"42","D:\\temple\\client\\src\\containers\\muiGrid\\muiGrid.jsx":"43"},{"size":1424,"mtime":1610705329776,"results":"44","hashOfConfig":"45"},{"size":362,"mtime":499162500000,"results":"46","hashOfConfig":"45"},{"size":3389,"mtime":1611917911422,"results":"47","hashOfConfig":"45"},{"size":847,"mtime":1609926633216,"results":"48","hashOfConfig":"45"},{"size":473,"mtime":1610697037643,"results":"49","hashOfConfig":"45"},{"size":401,"mtime":1609916783949,"results":"50","hashOfConfig":"45"},{"size":419,"mtime":1609916796746,"results":"51","hashOfConfig":"45"},{"size":399,"mtime":1609916812168,"results":"52","hashOfConfig":"45"},{"size":233,"mtime":1610693968802,"results":"53","hashOfConfig":"45"},{"size":872,"mtime":1609926213908,"results":"54","hashOfConfig":"45"},{"size":818,"mtime":1610117747846,"results":"55","hashOfConfig":"45"},{"size":792,"mtime":1609926447579,"results":"56","hashOfConfig":"45"},{"size":6498,"mtime":1610344013179,"results":"57","hashOfConfig":"45"},{"size":1601,"mtime":1610204315456,"results":"58","hashOfConfig":"45"},{"size":145,"mtime":1609926526806,"results":"59","hashOfConfig":"45"},{"size":1509,"mtime":1610204344459,"results":"60","hashOfConfig":"45"},{"size":2906,"mtime":1610265111279,"results":"61","hashOfConfig":"45"},{"size":141,"mtime":1609926504007,"results":"62","hashOfConfig":"45"},{"size":142,"mtime":1609926894212,"results":"63","hashOfConfig":"45"},{"size":1427,"mtime":1610204289217,"results":"64","hashOfConfig":"45"},{"size":2521,"mtime":1610265081876,"results":"65","hashOfConfig":"45"},{"size":372,"mtime":1610189977636,"results":"66","hashOfConfig":"45"},{"size":196,"mtime":1610188776670,"results":"67","hashOfConfig":"45"},{"size":357,"mtime":1610203247012,"results":"68","hashOfConfig":"45"},{"size":362,"mtime":1610203536009,"results":"69","hashOfConfig":"45"},{"size":7379,"mtime":1610356166699,"results":"70","hashOfConfig":"45"},{"size":2897,"mtime":1610648986058,"results":"71","hashOfConfig":"45"},{"size":1976,"mtime":1610686683282,"results":"72","hashOfConfig":"45"},{"size":1515,"mtime":1610647834093,"results":"73","hashOfConfig":"45"},{"size":494,"mtime":1610697515896,"results":"74","hashOfConfig":"45"},{"size":226,"mtime":1610705059453,"results":"75","hashOfConfig":"45"},{"size":404,"mtime":1610698117799,"results":"76","hashOfConfig":"45"},{"size":139,"mtime":1610696471131,"results":"77","hashOfConfig":"45"},{"size":197,"mtime":1610705190701,"results":"78","hashOfConfig":"45"},{"size":371,"mtime":1610697126963,"results":"79","hashOfConfig":"45"},{"size":2125,"mtime":1610787438108,"results":"80","hashOfConfig":"45"},{"size":3384,"mtime":1611675789787,"results":"81","hashOfConfig":"45"},{"size":4493,"mtime":1611675785738,"results":"82","hashOfConfig":"45"},{"size":1908,"mtime":1611738427577,"results":"83","hashOfConfig":"45"},{"size":1634,"mtime":1611738341138,"results":"84","hashOfConfig":"45"},{"size":557,"mtime":1611738129991,"results":"85","hashOfConfig":"45"},{"size":15817,"mtime":1611906137343,"results":"86","hashOfConfig":"45"},{"size":6447,"mtime":1611925073167,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1wpxygl",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"90"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"90"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"90"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"90"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"90"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"90"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"90"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"90"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"90"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\temple\\client\\src\\index.js",[],["194","195"],"D:\\temple\\client\\src\\reportWebVitals.js",[],"D:\\temple\\client\\src\\App.js",[],"D:\\temple\\client\\src\\containers\\layout\\layout.jsx",[],"D:\\temple\\client\\src\\reducers\\rootReducer.js",[],"D:\\temple\\client\\src\\reducers\\familyInfo.js",[],"D:\\temple\\client\\src\\reducers\\userVazhippad.js",[],"D:\\temple\\client\\src\\reducers\\vazhippad.js",[],"D:\\temple\\client\\src\\actions\\types.js",[],"D:\\temple\\client\\src\\containers\\userVazhippad\\userVazhippad.jsx",["196"],"import React, {useState} from 'react'\r\nimport { Tabs,Tab } from \"react-bootstrap\";\r\nimport AddUserVazhippad from '../../components/userVazhippad/addUserVazhippad'\r\nimport ListUserVazhippad from \"../../components/userVazhippad/listUserVazhippad\";\r\nimport EditUserVazhippad from \"../../components/userVazhippad/editUserVazhippad\";\r\n\r\nexport default function UserVazhippad() {\r\n    const [key, setKey] = useState('addUserVazhippad');\r\n    return (\r\n        <Tabs\r\n        id=\"controlled-tab-example\"\r\n        activeKey={key}\r\n        onSelect={(k) => setKey(k)}\r\n      >\r\n        <Tab eventKey=\"addUserVazhippad\" title=\"Add User Vazhippad\">\r\n            <AddUserVazhippad></AddUserVazhippad>\r\n        </Tab>\r\n        <Tab eventKey=\"listUservazhippad\" title=\"List User Vazhippad\">\r\n            <ListUserVazhippad></ListUserVazhippad>\r\n        </Tab>\r\n      </Tabs>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\containers\\familyInfo\\familyInfo.jsx",["197"],"import React, { useState } from \"react\";\r\nimport { Tabs,Tab } from \"react-bootstrap\";\r\nimport AddFamilyInfo from \"../../components/familyInfo/addFamilyInfo\";\r\nimport ListFamilyInfo from '../../components/familyInfo/listFamilyInfo';\r\nimport EditFamilyInfo from \"../../components/familyInfo/editFamilyInfo\";\r\n\r\nexport default function FamilyInfo() {\r\n    const [key, setKey] = useState('addFamilyInfo');\r\n    return (\r\n      <Tabs\r\n        id=\"controlled-tab-example\"\r\n        activeKey={key}\r\n        onSelect={(k) => setKey(k)}\r\n      >\r\n        <Tab eventKey=\"addFamilyInfo\" title=\"Add Family Info\">\r\n            <AddFamilyInfo></AddFamilyInfo>\r\n        </Tab>\r\n        <Tab eventKey=\"listFamilyInfo\" title=\"List Family Info\">\r\n            <ListFamilyInfo></ListFamilyInfo>\r\n        </Tab>\r\n      </Tabs>\r\n    );\r\n}\r\n","D:\\temple\\client\\src\\containers\\vazhippad\\vazhippad.jsx",["198"],"import React, {useState} from 'react'\r\nimport { Tabs,Tab } from \"react-bootstrap\";\r\nimport AddVazhippad from '../../components/vazhippad/addVazhippad'\r\nimport ListVazhippad from \"../../components/vazhippad/listVazhippad\";\r\nimport EditVazhippad from \"../../components/vazhippad/editVazhippad\";\r\nexport default function Vazhippad() {\r\n    const [key, setKey] = useState('addVazhippad');\r\n    return (\r\n        <Tabs\r\n        id=\"controlled-tab-example\"\r\n        activeKey={key}\r\n        onSelect={(k) => setKey(k)}\r\n      >\r\n        <Tab eventKey=\"addVazhippad\" title=\"Add Vazhippad\">\r\n            <AddVazhippad></AddVazhippad>\r\n        </Tab>\r\n        <Tab eventKey=\"listvazhippad\" title=\"List Vazhippad\">\r\n            <ListVazhippad></ListVazhippad>\r\n        </Tab>\r\n      </Tabs>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\components\\userVazhippad\\addUserVazhippad.jsx",["199","200","201","202","203","204"],"import React, {Fragment, useState} from 'react'\r\nimport { Form, Button, Row, Col, ButtonGroup } from \"react-bootstrap\";\r\nimport {useForm, Controller} from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport {yupResolver} from '@hookform/resolvers/yup'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst top100Films = [\r\n{ title: 'The Shawshank Redemption', year: 1994 },\r\n{ title: 'The Godfather', year: 1972 },\r\n{ title: 'The Godfather: Part II', year: 1974 },\r\n{ title: 'The Dark Knight', year: 2008 },\r\n{ title: '12 Angry Men', year: 1957 },\r\n{ title: \"Schindler's List\", year: 1993 }\r\n];\r\nexport default function AddUserVazhipadd() {\r\n    // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\n    const [records, setRecords] = useState([1]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [options, setOptions] = useState([]);\r\n    // const schema = yup.object().shape({\r\n    //     name : yup.string().required(),\r\n    //     vazhippad : yup.string().required(),\r\n    //     date : yup.string().required() \r\n    // });\r\n\r\n    const schema = yup.object().shape({\r\n        userVazhippad: yup.array().of(yup.object().shape({\r\n            name : yup.object().required(),\r\n            vazhippad : yup.string().required(),\r\n            date : yup.string().required() \r\n        }))\r\n    });\r\n\r\n    const {register, handleSubmit, errors, control} = useForm({\r\n       // mode : 'touched',\r\n        resolver : yupResolver(schema),\r\n        defaultValues : {\r\n            userVazhippad : [\r\n                {\r\n                    name : 20\r\n                }\r\n            ]\r\n        }\r\n    });\r\n    const handleSearch = (query) => {\r\n        setIsLoading(true);\r\n        setTimeout(() => {\r\n            const options = [{id: 1, name: 'prasobh'},\r\n            {id: 2, name: 'chandran'}]\r\n            setOptions(options);\r\n            setIsLoading(false);\r\n        }, 2000);\r\n       \r\n    };\r\n    const filterBy = () => true;\r\n    const addMore = () => {\r\n        let copyRecords = [...records,records.length + 1];\r\n        setRecords(copyRecords)\r\n    }\r\n    const remove = () => {\r\n        let copyRecords = [...records.filter((v,i) => i != records.length-1)]\r\n        setRecords(copyRecords)\r\n    }\r\n    const onSubmit = (data) => {\r\n        console.log(data)\r\n    }\r\n    console.log(errors)\r\n    return (\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n            {records.length && records.map((obj,i) => {\r\n                return (\r\n                    <Row>\r\n                        <Col md=\"4\">\r\n                            <Form.Group controlId=\"Name\">\r\n                            <Form.Label size=\"md\">Name</Form.Label>\r\n                            <Controller\r\n                                name={`userVazhippad[${i}].name`}\r\n                                control={control}\r\n                                render={({onChange}) =>{\r\n                                    return (<Autocomplete\r\n                                        id=\"combo-box-demo\"\r\n                                        options={top100Films}\r\n                                        getOptionLabel={(option) => option.title}\r\n                                        style={{ width: 300 }}\r\n                                        onChange={(e, data) => onChange(data) }\r\n                                        renderInput={(params) => <TextField {...params} label=\"Combo box\" variant=\"outlined\" \r\n                                        />}\r\n                                    />)\r\n                                    }\r\n                                    \r\n                                } \r\n                            />\r\n                            {/* <Form.Control type=\"text\" placeholder=\"Enter Name\" name={`userVazhippad[${i}].name`} ref={register} /> */}\r\n                            <Form.Text className=\"text-muted\">\r\n                                Please enter three letter to show auto-suggestion\r\n                            </Form.Text>\r\n                        { errors.userVazhippad && errors.userVazhippad[i] && errors.userVazhippad[i].name && <Form.Text className=\"text-danger\">Name is required</Form.Text> }\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col  md=\"4\">\r\n                            <Form.Group controlId=\"Vazhippad\" >\r\n                            <Form.Label>Select Vazhippad</Form.Label>\r\n                            <Form.Control as=\"select\" name={`userVazhippad[${i}].vazhippad`} ref={register}>\r\n                                <option></option>\r\n                                <option>1</option>\r\n                                <option>2</option>\r\n                            </Form.Control>\r\n                            {errors.userVazhippad && errors.userVazhippad[i] && errors.userVazhippad[i].vazhippad  && <Form.Text className=\"text-danger\">Vazhippad is required</Form.Text>}\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"4\">\r\n                            <Form.Group controlId=\"Name\"  >\r\n                            <Form.Label>Date</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Date\" name={`userVazhippad[${i}].date`} ref={register} />\r\n                            <Form.Text className=\"text-muted\">\r\n                                Please enter date in format DD/MM/YYYY\r\n                            </Form.Text>\r\n                            {errors.userVazhippad && errors.userVazhippad[i] && errors.userVazhippad[i].date && <Form.Text className=\"text-danger\">Date is required</Form.Text>}\r\n                            </Form.Group>\r\n                            \r\n                        </Col>\r\n                    </Row>\r\n                )\r\n            })}\r\n        \r\n            <Row>\r\n            <Col>\r\n                <ButtonGroup className=\"mb-2\">\r\n                    <Button variant=\"primary\" type=\"submit\">Submit</Button>\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"mb-2 float-right\">\r\n                    <Button variant=\"success\" type=\"button\" name=\"addMore\" onClick={addMore}>Add More</Button>\r\n                    {records.length > 1 &&  <Button variant=\"danger\" type=\"button\"  name=\"remove\" onClick={remove}>Remove</Button>}\r\n                    \r\n                </ButtonGroup>\r\n            </Col>\r\n        </Row>  \r\n      </Form>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\components\\userVazhippad\\listUserVazhippad.jsx",["205"],"import React,{useEffect} from 'react'\r\nimport {Table, ButtonGroup, Button} from \"react-bootstrap\";\r\nimport {useSelector,useDispatch} from \"react-redux\";\r\nimport {listUserVazhippad} from \"../../actions/userVazhippad\";\r\nexport default function ListUserVazhippad() {\r\n    const result = useSelector(state => { return state.userVazhippadReducer.listUserVazhippad})\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(listUserVazhippad())\r\n        return () => {\r\n        }\r\n    }, [])\r\n    console.log(result);\r\n    return (\r\n        <Table striped bordered hover size=\"sm\">\r\n            <thead>\r\n                <tr>\r\n                <th>Reference No.</th>\r\n                <th>Name</th>\r\n                <th>Vazhippad</th>\r\n                <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {result.length ? result.map(obj => {\r\n                    return(<tr>\r\n                        <td>1</td>\r\n                        <td>{obj.name}</td>\r\n                        <td>{obj.vazhippad}</td>\r\n                        <td>{obj.date}</td>\r\n                        <td>\r\n                            <ButtonGroup aria-label=\"Basic example\" size=\"sm\">\r\n                                <Button variant=\"secondary\">Edit</Button>\r\n                                <Button variant=\"secondary\">Delete</Button>\r\n                            </ButtonGroup>\r\n                        </td>\r\n                        </tr>)\r\n                }) : <tr><td colSpan={4}></td></tr>}\r\n                \r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\components\\userVazhippad\\editUserVazhippad.jsx",[],"D:\\temple\\client\\src\\components\\vazhippad\\listVazhippad.jsx",["206","207"],"import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Table, ButtonGroup, Button} from \"react-bootstrap\";\r\nimport {listVazhippad} from \"../../actions/vazhippad\";\r\nimport axiosInstance from \"../../axiosConfig\";\r\nexport default function ListVazhippad() {\r\n    const dispatch = useDispatch()\r\n    const result = useSelector(state => state.vazhippadReducer.listVazhippad);\r\n    useEffect(() => {\r\n        dispatch(listVazhippad())\r\n        return () => {\r\n        }\r\n    }, [])\r\n    return (\r\n        <Table striped bordered hover size=\"sm\">\r\n            <thead>\r\n                <tr>\r\n                <th>Reference No.</th>\r\n                <th>Vazhippad Name</th>\r\n                <th>Price</th>\r\n                <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {result.length ? result.map(obj => {\r\n                    return (<tr>\r\n                    <td>1</td>\r\n                    <td>{obj.name}</td>\r\n                    <td>{obj.price}</td>\r\n                    <td>\r\n                        <ButtonGroup aria-label=\"Basic example\" size=\"sm\">\r\n                            <Button variant=\"secondary\">Edit</Button>\r\n                            <Button variant=\"secondary\">Delete</Button>\r\n                        </ButtonGroup>\r\n                    </td>\r\n                    </tr>)\r\n                }): <tr><td colSpan={4}></td></tr>}\r\n                \r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\components\\vazhippad\\addVazhippad.jsx",["208"],"import React, {useState} from 'react'\r\nimport { Form, Row, Col, Button, ButtonGroup } from \"react-bootstrap\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport {useForm} from \"react-hook-form\";\r\nexport default function AddVazhippad() {\r\n    const [records, setRecords] = useState([1]);\r\n    // const schema = yup.object().shape({\r\n    //   vazhippad : yup.string().required(),\r\n    //   price : yup.number().required()\r\n    // });\r\n\r\n    const schema = yup.object().shape({\r\n      vazhippad : yup.array().of(yup.object().shape({\r\n        vazhippad : yup.string().required(),\r\n        price : yup.number().required()\r\n      }))\r\n    })\r\n    const { register, handleSubmit, errors } = useForm({\r\n      resolver : yupResolver(schema)\r\n    })\r\n    const addMore = () => {\r\n      let copyRecords = [...records, records.length + 1];\r\n      setRecords(copyRecords);\r\n    }\r\n    const remove = () => {\r\n      let copyRecords = records.filter((obj,i) => i != records.length -1)\r\n      setRecords(copyRecords);\r\n    }\r\n    const onSubmit = data => {\r\n      console.log(`submitted`)\r\n      console.log(data)\r\n    }\r\n    // console.log(errors)\r\n    return (\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n      {records.length && records.map((obj,i) => {\r\n       return (<Row>\r\n          <Col md={8} lg={6}>\r\n            <Form.Group controlId=\"Name\">\r\n              <Form.Label>Vazhippad Name</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Enter Name\" name={`vazhippad[${i}].vazhippad`} ref={register}/>\r\n              <Form.Text className=\"text-muted\">\r\n                Please enter three letter to show auto-suggestion\r\n              </Form.Text>\r\n              {errors.vazhippad && errors.vazhippad[i] && errors.vazhippad[i].vazhippad && <Form.Text className=\"text-danger\">Vahippad is required</Form.Text>}\r\n            </Form.Group>\r\n          </Col>\r\n          <Col md={8} lg={6}>\r\n            <Form.Group controlId=\"Name\">\r\n              <Form.Label>Price</Form.Label>\r\n              <Form.Control type=\"number\" placeholder=\"Enter Price\" name={`vazhippad[${i}].price`} ref={register} />\r\n              {errors.vazhippad && errors.vazhippad[i] && errors.vazhippad[i].price && <Form.Text className=\"text-danger\">Price is required</Form.Text>}\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>)\r\n      })}\r\n      <Row>\r\n        <Col>\r\n                <ButtonGroup className=\"mb-2\">\r\n                    <Button variant=\"primary\" type=\"submit\">Submit</Button>\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"mb-2 float-right\">\r\n                    <Button variant=\"success\" onClick={addMore}>Add More</Button>\r\n                    {records.length > 1 && <Button variant=\"danger\" onClick={remove}>Remove</Button>}\r\n                </ButtonGroup>\r\n            </Col>\r\n      </Row>\r\n        \r\n      </Form>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\components\\vazhippad\\editVazhippad.jsx",[],"D:\\temple\\client\\src\\components\\familyInfo\\editFamilyInfo.jsx",[],"D:\\temple\\client\\src\\components\\familyInfo\\listFamilyInfo.jsx",["209"],"import React, {useEffect} from 'react'\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {listFamilyInfo} from \"../../actions/familyInfo\"\r\nimport {Table, ButtonGroup, Button} from \"react-bootstrap\";\r\nexport default function ListFamilyInfo() {\r\n    const dispatch = useDispatch();\r\n    const result = useSelector(state => state.familyInfoReducer.listFamilyInfo)\r\n    useEffect(() => {\r\n        dispatch(listFamilyInfo())\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n    return (\r\n        <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n            <tr>\r\n            <th>Reference No.</th>\r\n            <th>Name</th>\r\n            <th>Actions</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n        {result.length ? result.map(obj => {\r\n                    return(<tr>\r\n                        <td>1</td>\r\n                        <td>{obj.name}</td>\r\n                        <td>{obj.address}</td>\r\n                        <td>\r\n                            <ButtonGroup aria-label=\"Basic example\" size=\"sm\">\r\n                                <Button variant=\"secondary\">Edit</Button>\r\n                                <Button variant=\"secondary\">Delete</Button>\r\n                            </ButtonGroup>\r\n                        </td>\r\n                        </tr>)\r\n                }) : <tr><td colSpan={3}></td></tr>}\r\n           \r\n        </tbody>\r\n    </Table>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\components\\familyInfo\\addFamilyInfo.jsx",["210"],"import React, {useState} from 'react'\r\nimport {Form, Row, Col, Button, ButtonGroup} from \"react-bootstrap\";\r\nimport * as yup from \"yup\";\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nexport default function AddFamilyInfo() {\r\n    const [records, setRecords] = useState([1]);\r\n    const schema = yup.object().shape({\r\n        familyInfo : yup.array().of(yup.object().shape({\r\n            name : yup.string().required()\r\n        }))\r\n    })\r\n    const addMore = () => {\r\n        let copyRecords = [...records, records.length + 1];\r\n        setRecords(copyRecords);\r\n      }\r\n      const remove = () => {\r\n        let copyRecords = records.filter((obj,i) => i != records.length -1)\r\n        setRecords(copyRecords);\r\n      }\r\n      const onSubmit = data => {\r\n        console.log(`submitted`)\r\n        console.log(data)\r\n      }\r\n    const { register, handleSubmit, errors } = useForm({\r\n        resolver : yupResolver(schema)\r\n    })\r\n    return (\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n        {records.length && records.map((obj,i) => {\r\n            return ( <Row>\r\n                <Col md={8} lg={5}>\r\n                    <Form.Group controlId=\"Name\">\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter Name\" name={`familyInfo[${i}].name`} ref={register} />\r\n                    {errors.familyInfo && errors.familyInfo[i] && errors.familyInfo[i].name && <Form.Text className=\"text-danger\">Name is required</Form.Text>}\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>)\r\n        })}\r\n       \r\n        <Row>\r\n            <Col md={8} lg={5}>\r\n                <Form.Group controlId=\"Vazhippad\">\r\n                <Form.Label>Family Address</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={3} name=\"address\" ref={register} />\r\n                </Form.Group>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n        <Col>\r\n                <ButtonGroup className=\"mb-2\">\r\n                    <Button variant=\"primary\" type=\"submit\">Submit</Button>\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"mb-2 float-right\">\r\n                    <Button variant=\"success\" onClick={addMore}>Add More Names</Button>\r\n                    {records.length > 1 && <Button variant=\"danger\" onClick={remove}>Remove</Button>}\r\n                    \r\n                </ButtonGroup>\r\n            </Col>\r\n        </Row>\r\n\r\n      </Form>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\actions\\userVazhippad.js",[],"D:\\temple\\client\\src\\axiosConfig.js",[],"D:\\temple\\client\\src\\actions\\vazhippad.js",[],"D:\\temple\\client\\src\\actions\\familyInfo.js",[],"D:\\temple\\client\\src\\containers\\fullComponents\\fullComponents.jsx",["211","212","213"],"import React from 'react'\r\nimport {Form, Row,Col, Button} from \"react-bootstrap\";\r\nimport {\r\n    TextField,\r\n    Checkbox,\r\n    Select,\r\n    MenuItem,\r\n    Switch,\r\n    RadioGroup,\r\n    FormControlLabel,\r\n    ThemeProvider,\r\n    Radio,\r\n    createMuiTheme,\r\n    Slider,\r\n    \r\n  } from \"@material-ui/core\";\r\nimport ReactSelect from \"react-select\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\"\r\nimport {useForm,Controller} from \"react-hook-form\";\r\nexport default function FullComponents() {\r\n    const schema = Yup.object().shape({\r\n        firstName : Yup.string().required(),\r\n        country : Yup.number().required(),\r\n        gender : Yup.string().required(),\r\n        accept : Yup.bool().oneOf([true], 'Field must be checked'),\r\n        other : Yup.bool().oneOf([true], 'Field must be checked'),\r\n        state : Yup.object().required(),\r\n        dob : Yup.string().required(),\r\n        amountToPay : Yup.string().required(),\r\n        performance : Yup.number().required(),\r\n    })\r\n    const {control,errors,handleSubmit,register} = useForm({\r\n        resolver : yupResolver(schema),\r\n        defaultValues : {\r\n            accept : false,\r\n            other : false,\r\n            state : {label : \"None\", value : \"  \"}\r\n        }\r\n    })\r\n\r\n    const onSubmit = (data) => {\r\n        console.log(data)\r\n    }\r\n    console.log(`errors`)\r\n    console.log(errors)\r\n    return (\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Row>\r\n                <Col md={5}>\r\n                    <Form.Group controlId=\"firstName\">\r\n                        <Form.Label size=\"md\">First Name</Form.Label>\r\n                        <Controller\r\n                            name= \"firstName\"\r\n                            as = {TextField}\r\n                            control = {control}\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}>\r\n                    <Form.Group controlId=\"country\">\r\n                        <Form.Label>Country</Form.Label>\r\n                        <Controller \r\n                            as={\r\n                                <Select>\r\n                                    <MenuItem value={1}>Afganistan</MenuItem>\r\n                                    <MenuItem value={2}>America</MenuItem>\r\n                                </Select>\r\n                            }\r\n                            name=\"country\"\r\n                            control={control}\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}>\r\n                    <Form.Group controlId=\"Gender\">\r\n                        <Controller name=\"gender\" control={control} \r\n                            as = {<RadioGroup aria-label=\"Gender\">\r\n                            <FormControlLabel \r\n                                value=\"male\"\r\n                                label=\"Male\"\r\n                                control={<Radio />}\r\n                            />\r\n                            <FormControlLabel \r\n                                value=\"female\"\r\n                                label=\"Female\"\r\n                                control={<Radio />}\r\n                            />\r\n                        </RadioGroup>} />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}>\r\n                    <Form.Group controlId=\"accept\">\r\n                            <Form.Label>Accept Agreement</Form.Label>\r\n                        <Controller\r\n                            name=\"accept\"\r\n                            control={control}\r\n                            render={(props) => {\r\n                                console.log(props);\r\n                                return (<Checkbox\r\n                                onChange={(e) => props.onChange(e.target.checked)}\r\n                                checked={props.value}\r\n                                />)\r\n                            }}\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}>\r\n                    <Form.Group>\r\n                        <Form.Label>Accept Other Agreement </Form.Label>\r\n                        <Controller name=\"other\" control={control} \r\n                        render = {(props) => {\r\n                            return <Switch onChange={(e) => props.onChange(e.target.checked)} checked = {props.value} />\r\n                        }}\r\n                         />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}>\r\n                    <Form.Group>\r\n                        <Form.Label>State </Form.Label>\r\n                        <Controller name=\"state\" control={control} as={ReactSelect}\r\n                        options = {[\r\n                            {value : 1, label : \"kerala\"},\r\n                            {value : 2, label : \"temil nadu\"}\r\n                        ]}\r\n                        isClearable\r\n                         />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}>\r\n                    <Form.Group>\r\n                        <Form.Label>Date of Birth </Form.Label>\r\n                        <Controller name=\"dob\" control={control} \r\n                        render={(props) => {\r\n                            return(\r\n                                <ReactDatePicker \r\n                                    {...props}\r\n                                    selected = {props.value}\r\n                                    className=\"input\"\r\n                                    placeholderText=\"Select DOB\"\r\n                                />\r\n                            )\r\n                        }} \r\n                         />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}>\r\n                    <Form.Group>\r\n                        <Form.Label>Amount to Pay</Form.Label>\r\n                        <Controller name=\"amountToPay\" control={control} \r\n                        as={NumberFormat}\r\n                        thousandSeparator\r\n                        className=\"input\"\r\n                         />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}>\r\n                    <Form.Group>\r\n                        <Form.Label>Performance</Form.Label>\r\n                        <Controller name=\"performance\" control={control} \r\n                        defaultValue ={[0,10]}\r\n                        render = {(props) => {\r\n                            return <Slider {...props} max={10} step={1} onChange={(e,data) => props.onChange(data)} valueLabelDisplay=\"auto\" />\r\n                        }}\r\n                         />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Button type=\"submit\">Submit</Button>\r\n        </Form>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\containers\\table\\serverTable.jsx",["214","215","216","217"],"import React, {useState, useEffect} from 'react'\r\nimport useTable from \"./table\";\r\nimport serverData from \"./serverData.json\";\r\nimport TableSearch from \"./search\"\r\nexport default function ServerTable() {\r\n    const [page, setPage] = useState(4)\r\n    const [perPage, setPerPage] = useState(10);\r\n    const [totalPages, setTotalPages] = useState(0)\r\n    const [totalResults, setTotalReults] = useState(0)\r\n    const [result, setResult] = useState([]);\r\n    const [filter, setFilter] = useState({});\r\n    const [sort, setSort] = useState({\r\n        fieldName : 'first_name',\r\n        orderBy : false\r\n    })\r\n    const header = [\r\n        {\r\n            id : \"first_name\",\r\n            title : \"First Name\"\r\n        },\r\n        {\r\n            id : \"last_name\",\r\n            title : \"Last Name\"\r\n        },\r\n        {\r\n            id : \"email\",\r\n            title : \"Email\"\r\n        },\r\n        {\r\n            id : \"gender\",\r\n            title : \"Gender\"\r\n        }\r\n    ]\r\n    const {TableContainer, TableHead, TableBody, TablePagination} = useTable({header, result});\r\n    const getResults = async (arg = false) => {\r\n        console.log(`entered....`)\r\n        console.log(filter)\r\n        console.log(sort)\r\n        console.log(page)\r\n        if(arg) {\r\n            if(arg.type == \"sort\"){\r\n                await setSort({\r\n                    fieldName : arg.sort.fieldName,\r\n                    orderBy : arg.sort.orderBy\r\n                })\r\n                \r\n            }\r\n            else if(arg.type == \"pagination\"){\r\n                await setPage(arg.page)\r\n            }\r\n        }\r\n        let copyResult = [...serverData];\r\n        setResult(copyResult.slice(parseInt(page)*parseInt(perPage)-parseInt(perPage), parseInt(page)*parseInt(perPage)))\r\n        setTotalReults(1000);\r\n        setTotalPages(1000/perPage);\r\n    }\r\n    useEffect(() => {\r\n        getResults()\r\n        return () => {\r\n            \r\n        }\r\n    }, [filter,sort,page])\r\n    return (\r\n        <>\r\n        <TableSearch filter={filter} setFilter={setFilter}></TableSearch>\r\n        <hr/>\r\n        <TableContainer>\r\n            <TableHead header={header} sort= {sort} setSort={setSort}></TableHead>\r\n            <TableBody>\r\n                {\r\n                    result.length ? result.map(obj => {\r\n                        return (\r\n                            <tr>\r\n                                <td>{obj.first_name}</td>\r\n                                <td>{obj.last_name}</td>\r\n                                <td>{obj.email}</td>\r\n                                <td>{obj.gender}</td>\r\n                            </tr>\r\n                        )\r\n                    }) : null\r\n                }\r\n            </TableBody>\r\n            <TablePagination page={page} totalResults={totalResults} totalPages={totalPages} setPage={setPage}></TablePagination>\r\n        </TableContainer>\r\n        </>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\containers\\table\\table.js",["218","219","220","221","222","223","224"],"import React from 'react'\r\nimport {Table, ButtonGroup, Button} from \"react-bootstrap\";\r\nexport default function table() {\r\n    const TableContainer = (props) => {\r\n        return (<Table>{props.children}</Table>)\r\n    }\r\n    const TableHead = (props) => {\r\n        const {sort, page, header, handleSearch, setSort} = props;\r\n        return (<thead>\r\n            <tr>\r\n                {header.map(columnInfo => {\r\n                    return <td key={columnInfo.id}>\r\n                       <a onClick={() => setSort({ fieldName : columnInfo.id, orderBy : columnInfo.id == sort.fieldName ? !sort.orderBy : 0 })}> {columnInfo.title} </a>\r\n                    </td>\r\n                })}\r\n            </tr>\r\n        </thead>)\r\n    }\r\n    const TableBody = (props) => {\r\n        return (<tbody>{props.children}</tbody>)\r\n    }\r\n    const TablePagination = (props) => {\r\n        const { page, totalPages, totalResults, setPage} = props;\r\n        let output = [];\r\n        for(let i = page-4; i<=page; i++){\r\n            if(i > 0)\r\n            output.push(\r\n                <Button variant=\"light\" onClick={() => setPage(i)} active={page == i}>{i}</Button>\r\n            )\r\n        }\r\n        for(let i = page+1; i<page+4; i++){\r\n            if(i < totalPages)\r\n            output.push(\r\n                <Button variant=\"light\" onClick={() => setPage(i)}  active={page == i}>{i}</Button>\r\n            )\r\n        }\r\n        return (\r\n            <tfoot>\r\n                <tr>\r\n                <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                    <Button variant=\"light\" onClick={() => setPage(1)} >&#60;&#60;</Button>\r\n                    {output}\r\n                    <Button variant=\"light\" onClick={() => setPage(totalPages)} >&#62;&#62;</Button>\r\n                </ButtonGroup>\r\n                </tr>\r\n            </tfoot>\r\n        )\r\n    }\r\n    return {\r\n        TableContainer,\r\n        TableHead,\r\n        TableBody,\r\n        TablePagination\r\n    }\r\n\r\n}\r\n","D:\\temple\\client\\src\\containers\\table\\search.js",[],"D:\\temple\\client\\src\\containers\\reduxSaga\\reduxSaga.jsx",["225"],"import React,{ useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {getUser} from \"../../actions/userSaga\";\r\nexport default function ReduxSaga() {\r\n    const userInfo = useSelector(state => state.userReducer.user)\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getUser())\r\n        return () => {\r\n        }\r\n    }, [useDispatch])\r\n    return (\r\n        <div>\r\n            {JSON.stringify(userInfo)}\r\n        </div>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\saga\\rootSaga.js",[],"D:\\temple\\client\\src\\saga\\handlers\\user.js",["226"],"import { call, put } from 'redux-saga/effects'\r\nimport {getUser} from '../requests/user'\r\nimport * as Types from \"../../actions/types\";\r\nimport { setUser } from '../../actions/userSaga'\r\nexport function* setUserHandler(action){\r\n    try{\r\n        const result = yield call(getUser);\r\n        const {data} = result;\r\n        yield put(setUser(data))\r\n    }\r\n    catch(e){\r\n        console.log(e)\r\n    }\r\n}","D:\\temple\\client\\src\\saga\\requests\\user.js",[],"D:\\temple\\client\\src\\actions\\userSaga.js",[],"D:\\temple\\client\\src\\reducers\\userSaga.js",["227"],"import * as Types from '../actions/types.js'\r\n\r\nconst initialState = {\r\n    user : []\r\n}\r\n\r\nexport default function (state = initialState, actions){\r\n    switch (actions.type) {\r\n        case Types.SET_USER:\r\n            return {\r\n                ...state,\r\n                user : [...actions.payload]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\temple\\client\\src\\containers\\fileUpload\\fileUpload.jsx",["228"],"import React,{useState} from 'react'\r\nimport { Form, Button, Alert,ProgressBar } from 'react-bootstrap'\r\nimport axiosInstance from '../../axiosConfig'\r\nexport default function FileUpload() {\r\n    const [file, setfile] = useState(\"\");\r\n    const [fileName, setfileName] = useState(\"Choose File Name...\")\r\n    const [progress, setprogress] = useState(0);\r\n    const [msg, setmsg] = useState(\"\")\r\n    const [msgFlag, setmsgFlag] = useState(\"\")\r\n    const onChange = (e) => {\r\n        setfile(e.target.files[0]);\r\n        setfileName(e.target.files[0].name)\r\n    }\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        let formData = new FormData();\r\n        formData.append('file',file)\r\n        try{\r\n            const res = await axiosInstance.post('upload', formData, {\r\n                header : {\r\n                    'Content-Type' : \"multipart/form-data\"\r\n                },\r\n                onUploadProgress : progressEvent => {\r\n                    setprogress(parseInt(Math.round(progressEvent.loaded * 100)/ progressEvent.total))\r\n                }\r\n            });\r\n            setmsg(\"File uploaded successfully\")\r\n            setmsgFlag(\"success\");\r\n            setTimeout(() => {\r\n                setprogress(0)\r\n            }, 10000);\r\n        }\r\n        catch(e){\r\n            setTimeout(() => {\r\n                setprogress(0)\r\n            }, 10000);\r\n            setmsg(e.response.data.msg)\r\n            setmsgFlag(\"danger\")\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <>\r\n            {msg && <Alert variant={msgFlag}>\r\n                {msg}\r\n            </Alert>}\r\n            \r\n            <Form onSubmit={(e) => onSubmit(e)} className=\"mt-5\">\r\n                <Form.File \r\n                    id=\"custom-file\"\r\n                    label={fileName}\r\n                    custom\r\n                    onChange = {(e) => onChange(e)}\r\n                    className=\"mb-5\"\r\n                />\r\n                <ProgressBar animated now={progress} />\r\n                <Button type=\"submit\" variant=\"primary\" className=\"mt-5\">Submit</Button>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\containers\\serverAgGrid\\serverAgGrid.jsx",["229"],"\r\n\r\nimport React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { AgGridReact } from '@ag-grid-community/react';\r\nimport { ServerSideRowModelModule } from '@ag-grid-enterprise/server-side-row-model';\r\nimport '@ag-grid-community/core/dist/styles/ag-grid.css';\r\nimport '@ag-grid-community/core/dist/styles/ag-theme-alpine-dark.css';\r\nimport axiosInstance from '../../axiosConfig'\r\nclass ServerAgGrid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      modules: [ServerSideRowModelModule],\r\n      columnDefs: [\r\n        {\r\n          field: 'athlete',\r\n          minWidth: 220,\r\n        },\r\n        {\r\n          field: 'country',\r\n          minWidth: 200,\r\n        },\r\n        { field: 'year' },\r\n        {\r\n          field: 'sport',\r\n          minWidth: 200,\r\n        },\r\n        { field: 'gold' },\r\n        { field: 'silver' },\r\n        { field: 'bronze' },\r\n      ],\r\n      defaultColDef: {\r\n        flex: 1,\r\n        minWidth: 100,\r\n        sortable: true,\r\n      },\r\n      rowModelType: 'serverSide',\r\n      serverSideStoreType: 'partial',\r\n    };\r\n  }\r\n\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n\r\n    const httpRequest = new XMLHttpRequest();\r\n    const updateData = (data) => {\r\n      var fakeServer = createFakeServer(data);\r\n      var datasource = createServerSideDatasource(fakeServer);\r\n      params.api.setServerSideDatasource(datasource);\r\n    };\r\n\r\n    httpRequest.open(\r\n      'GET',\r\n      'https://www.ag-grid.com/example-assets/olympic-winners.json'\r\n    );\r\n    httpRequest.send();\r\n    httpRequest.onreadystatechange = () => {\r\n      if (httpRequest.readyState === 4 && httpRequest.status === 200) {\r\n        updateData(JSON.parse(httpRequest.responseText));\r\n      }\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: '100%', height: '500px' }}>\r\n        <div\r\n          id=\"myGrid\"\r\n          style={{\r\n            height: '100%',\r\n            width: '100%',\r\n          }}\r\n          className=\"ag-theme-alpine-dark\"\r\n        >\r\n          <AgGridReact\r\n            modules={this.state.modules}\r\n            columnDefs={this.state.columnDefs}\r\n            defaultColDef={this.state.defaultColDef}\r\n            rowModelType={this.state.rowModelType}\r\n            serverSideStoreType={this.state.serverSideStoreType}\r\n            animateRows={true}\r\n            onGridReady={this.onGridReady}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction createServerSideDatasource(server) {\r\n  return {\r\n    getRows: async function (params) {\r\n      console.log(\r\n        '[Datasource] - rows requested by grid: startRow = ' +\r\n          params.request.startRow +\r\n          ', endRow = ' +\r\n          params.request.endRow\r\n      );\r\n      var response = await server.getData(params.request);\r\n      setTimeout(function () {\r\n        if (response.success) {\r\n          params.success({ rowData: response.rows });\r\n        } else {\r\n          params.fail();\r\n        }\r\n      }, 1000);\r\n    },\r\n  };\r\n}\r\nfunction createFakeServer(allData) {\r\n  return {\r\n    getData: async function (request) {\r\n      allData = await axiosInstance.post(\"/serverAgGrid/getData\",request)\r\n      return {\r\n        success: true,\r\n        rows: allData.data.rows,\r\n      };\r\n    },\r\n  };\r\n}\r\n\r\nexport default ServerAgGrid;\r\n","D:\\temple\\client\\src\\containers\\serverAgGrid\\serverAgGrid2.jsx",["230"],"import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { AgGridReact } from '@ag-grid-community/react';\r\nimport { AllCommunityModules } from '@ag-grid-community/all-modules';\r\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\r\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-alpine.css';\r\n\r\nclass ServerAgGrid2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      modules: AllCommunityModules,\r\n      columnDefs: [\r\n        {\r\n          headerName: 'Athlete',\r\n          field: 'athlete',\r\n        },\r\n        {\r\n          headerName: 'Sport',\r\n          field: 'sport',\r\n        },\r\n        {\r\n          headerName: 'Age',\r\n          field: 'age',\r\n          type: 'numberColumn',\r\n        },\r\n        {\r\n          headerName: 'Year',\r\n          field: 'year',\r\n          type: 'numberColumn',\r\n        },\r\n        {\r\n          headerName: 'Date',\r\n          field: 'date',\r\n          type: ['dateColumn', 'nonEditableColumn'],\r\n          width: 220,\r\n        },\r\n        {\r\n          headerName: 'Medals',\r\n          groupId: 'medalsGroup',\r\n          children: [\r\n            {\r\n              headerName: 'Gold',\r\n              field: 'gold',\r\n              type: 'medalColumn',\r\n            },\r\n            {\r\n              headerName: 'Silver',\r\n              field: 'silver',\r\n              type: 'medalColumn',\r\n            },\r\n            {\r\n              headerName: 'Bronze',\r\n              field: 'bronze',\r\n              type: 'medalColumn',\r\n            },\r\n            {\r\n              headerName: 'Total',\r\n              field: 'total',\r\n              type: 'medalColumn',\r\n              columnGroupShow: 'closed',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n      defaultColDef: {\r\n        width: 150,\r\n        editable: true,\r\n        filter: 'agTextColumnFilter',\r\n        floatingFilter: true,\r\n        resizable: true,\r\n      },\r\n      defaultColGroupDef: { marryChildren: true },\r\n      columnTypes: {\r\n        numberColumn: {\r\n          width: 130,\r\n          filter: 'agNumberColumnFilter',\r\n        },\r\n        medalColumn: {\r\n          width: 100,\r\n          columnGroupShow: 'open',\r\n          filter: false,\r\n        },\r\n        nonEditableColumn: { editable: false },\r\n        dateColumn: {\r\n          filter: 'agDateColumnFilter',\r\n          filterParams: {\r\n            comparator: function (filterLocalDateAtMidnight, cellValue) {\r\n              var dateParts = cellValue.split('/');\r\n              var day = Number(dateParts[0]);\r\n              var month = Number(dateParts[1]) - 1;\r\n              var year = Number(dateParts[2]);\r\n              var cellDate = new Date(year, month, day);\r\n              if (cellDate < filterLocalDateAtMidnight) {\r\n                return -1;\r\n              } else if (cellDate > filterLocalDateAtMidnight) {\r\n                return 1;\r\n              } else {\r\n                return 0;\r\n              }\r\n            },\r\n          },\r\n        },\r\n      },\r\n      rowData: null,\r\n    };\r\n  }\r\n\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n\r\n    const httpRequest = new XMLHttpRequest();\r\n    const updateData = (data) => {\r\n      this.setState({ rowData: data });\r\n    };\r\n\r\n    httpRequest.open(\r\n      'GET',\r\n      'https://www.ag-grid.com/example-assets/olympic-winners.json'\r\n    );\r\n    httpRequest.send();\r\n    httpRequest.onreadystatechange = () => {\r\n      if (httpRequest.readyState === 4 && httpRequest.status === 200) {\r\n        updateData(JSON.parse(httpRequest.responseText));\r\n      }\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: '100%', height: '500px' }}>\r\n        <div style={{ height: '100%', boxSizing: 'border-box' }}>\r\n          <div\r\n            id=\"myGrid\"\r\n            style={{\r\n              height: '100%',\r\n              width: '100%',\r\n            }}\r\n            className=\"ag-theme-alpine\"\r\n          >\r\n            <AgGridReact\r\n              modules={this.state.modules}\r\n              columnDefs={this.state.columnDefs}\r\n              defaultColDef={this.state.defaultColDef}\r\n              defaultColGroupDef={this.state.defaultColGroupDef}\r\n              columnTypes={this.state.columnTypes}\r\n              rowData={this.state.rowData}\r\n              onGridReady={this.onGridReady}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ServerAgGrid2;\r\n","D:\\temple\\client\\src\\containers\\useMemo\\useMemoHook.jsx",[],"D:\\temple\\client\\src\\containers\\useCallback\\useCallbackHook.jsx",[],"D:\\temple\\client\\src\\containers\\useCallback\\listMultiply.jsx",[],"D:\\temple\\client\\src\\containers\\muiReactHookForm\\muiReactHookForm.jsx",["231","232","233","234","235","236","237"],"import React from 'react'\r\nimport { FormControl, FormLabel, FormGroup, FormControlLabel,Input,InputLabel,TextField,RadioGroup,Radio,Checkbox, Select, MenuItem, Slider, Switch, Grid, Button, ListItemText} from '@material-ui/core'\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers'\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\nimport { useForm, Controller } from 'react-hook-form';\r\nexport default function MuiReactHookForm() {\r\n    const {handleSubmit, register, errors, watch, control, reset} = useForm(\r\n        {\r\n            defaultValues : \r\n            {\r\n                firstName : \"Prasobh\",\r\n                age : 10,\r\n                gender : 'male',\r\n                primary : true,\r\n                dob : \"2017-05-24\",\r\n                publishedDate : \"2017-05-24T13:30\",\r\n                temperature : [2,5],\r\n                updatedDate : \"01/28/2020\",\r\n                country : { code: \"AD\", label: \"Andorra\", phone: \"376\" },\r\n                hobbies : [],\r\n                hobbies2 : [30]\r\n            }\r\n        }\r\n    )\r\n    const onSubmit = (data) => {\r\n\r\n        console.log(`Data submitted....`)\r\n        console.log(data)\r\n    }\r\n    const hobbies = [\r\n        {title : \"Sports\", value : 10},\r\n        {title : \"Reading\", value : 20},\r\n        {title : \"Spirituality\", value : 30}\r\n    ]\r\n    return (\r\n        <form onSubmit={ handleSubmit(onSubmit)}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <Controller name=\"firstName\" control={control} \r\n                    as = {\r\n                        <TextField name=\"firstName\" label=\"First Name\" variant=\"outlined\" />\r\n                    } />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Age</FormLabel>\r\n                    <Controller name=\"age\" control={control} as = {\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            id=\"demo-simple-select\"\r\n                            value={10}\r\n                            >\r\n                        <MenuItem value={10}>Ten</MenuItem>\r\n                        <MenuItem value={20}>Twenty</MenuItem>\r\n                        <MenuItem value={30}>Thirty</MenuItem>\r\n                        </Select>} />\r\n                </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Gender</FormLabel>\r\n                    <Controller name=\"gender\" control={control} as = {\r\n                        <RadioGroup aria-label=\"gender\" name=\"gender1\" >\r\n                            <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\r\n                            <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n                            <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" />\r\n                            <FormControlLabel value=\"disabled\" disabled control={<Radio />} label=\"(Disabled option)\" />\r\n                        </RadioGroup>\r\n                    }\r\n                    />\r\n                </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Theme</FormLabel>\r\n                        <Controller\r\n                            name=\"secondary\"\r\n                            control={control}\r\n                            render={props => {\r\n                                return (\r\n                                    <FormGroup>\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox name=\"checkedA\" onChange={e => props.onChange(e.target.checked)} checked={props.value} />}\r\n                                                label=\"Secondary\"\r\n                                                value=\"secondary\"\r\n                                            />\r\n                                        </FormGroup>\r\n                                )\r\n                            }\r\n                            } // props contains: onChange, onBlur and value\r\n                        />\r\n                        <Controller\r\n                            name=\"primary\"\r\n                            control={control}\r\n                            render={props => {\r\n                                return (\r\n                                    <FormGroup>\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox name=\"checkedA\" onChange={e => props.onChange(e.target.checked)} checked={props.value} />}\r\n                                                label=\"Primary\"\r\n                                                value=\"primary\"\r\n                                            />\r\n                                        </FormGroup>\r\n                                )\r\n                            }\r\n                            } // props contains: onChange, onBlur and value\r\n                        />\r\n                        <Controller\r\n                            name=\"uncontrolled\"\r\n                            control={control}\r\n                            render={props => {\r\n                                return (\r\n                                    <FormGroup>\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox name=\"checkedA\" onChange={e => props.onChange(e.target.checked)} checked={props.value} />}\r\n                                                label=\"Uncontrolled\"\r\n                                                value=\"uncontrolled\"\r\n                                            />\r\n                                        </FormGroup>\r\n                                )\r\n                            }\r\n                            } // props contains: onChange, onBlur and value\r\n                        />\r\n               </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">DOB</FormLabel>\r\n                        <Controller name=\"dob\" control={control} as = {\r\n                            <TextField\r\n                            id=\"date\"\r\n                            label=\"Birthday\"\r\n                            type=\"date\"\r\n                            InputLabelProps={{\r\n                              shrink: true,\r\n                            }}\r\n                          />\r\n                        }\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Published Date</FormLabel>\r\n                        <Controller name=\"publishedDate\" control={control} as = {\r\n                            <TextField\r\n                            id=\"date\"\r\n                            label=\"Published Date\"\r\n                            type=\"datetime-local\"\r\n                            InputLabelProps={{\r\n                              shrink: true,\r\n                            }}\r\n                          />\r\n                        }\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Temperature</FormLabel>\r\n                         <Controller\r\n                            name=\"temperature\"\r\n                            control={control}\r\n                            // defaultValue={[0, 10]}\r\n                            render={(props) => (\r\n                                <Slider\r\n                                {...props}\r\n                                onChange={(_, value) => {\r\n                                    props.onChange(value);\r\n                                }}\r\n                                valueLabelDisplay=\"auto\"\r\n                                max={10}\r\n                                step={1}\r\n                                />\r\n                        )}\r\n                    />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Accept Terms and Conditions</FormLabel>\r\n                        <Controller\r\n                        name=\"acceptTerms\"\r\n                        control={control}\r\n                        render={(props) => (\r\n                            <Switch\r\n                            onChange={(e) => props.onChange(e.target.checked)}\r\n                            checked={props.value}\r\n                            />\r\n                        )}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Updated Date</FormLabel>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <Controller\r\n                            name=\"updatedDate\"\r\n                            control={control}\r\n                            render={({ ref, ...rest }) => (\r\n                                <KeyboardDatePicker\r\n                                margin=\"normal\"\r\n                                id=\"date-picker-dialog\"\r\n                                label=\"Date picker dialog\"\r\n                                format=\"MM/dd/yyyy\"\r\n                                KeyboardButtonProps={{\r\n                                    \"aria-label\": \"change date\"\r\n                                }}\r\n                                {...rest}\r\n                                />\r\n                            )}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Country</FormLabel>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <Controller\r\n                            name=\"country\"\r\n                            control={control}\r\n                            render={(props) => (\r\n                                <Autocomplete\r\n                                  {...props}\r\n                                  style={{ width: 300 }}\r\n                                  options={[  { code: \"AD\", label: \"Andorra\", phone: \"376\" },\r\n                                  { code: \"AE\", label: \"United Arab Emirates\", phone: \"971\" },\r\n                                  { code: \"AF\", label: \"Afghanistan\", phone: \"93\" }]}\r\n                                  getOptionLabel={(option) => option.label}\r\n                                  renderOption={(option) => (\r\n                                    <span>\r\n                                      <small>{option.code}</small>\r\n                                      {option.label}\r\n                                    </span>\r\n                                  )}\r\n                                  renderInput={(params) => (\r\n                                    <TextField\r\n                                      {...params}\r\n                                      label=\"Choose a country\"\r\n                                      variant=\"outlined\"\r\n                                    />\r\n                                  )}\r\n                                  onChange={(_, data) => props.onChange(data)}\r\n                                />\r\n                              )}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Hobbies</FormLabel>\r\n                        <Controller name=\"hobbies\" control={control} onChange= {(data) => (data)} render = {(props) => (\r\n                            <Select\r\n                                {...props}\r\n                                labelId=\"demo-mutiple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                multiple\r\n                                input={<Input />}\r\n                                onChange = {(event) => {\r\n                                    props.onChange(event.target.value);\r\n                                }}\r\n                                >\r\n                                    <MenuItem value={10}>Sports</MenuItem>\r\n                                    <MenuItem value={20}>Reading</MenuItem>\r\n                                    <MenuItem value={30}>Spirituality</MenuItem>\r\n                            </Select>)} />\r\n                    </FormControl>\r\n                </Grid>\r\n                \r\n                {/* checked={hobbies.indexOf(\"Sports\") > -1}\r\n                            checked={hobbies.indexOf(\"Reading\") > -1}\r\n                            checked={hobbies.indexOf(\"Spirituality\") > -1} */}\r\n                <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Hobbies2</FormLabel>\r\n                        <Controller name=\"hobbies2\" control={control} onChange= {(data) => (data)} render = {(props) => {\r\n                            return <Select\r\n                                {...props}\r\n                                labelId=\"demo-mutiple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                multiple\r\n                                input={<Input />}\r\n                                onChange = {(event) => {\r\n                                    props.onChange(event.target.value);\r\n                                }}\r\n                                 renderValue={(selected) => { \r\n                                    let arr = [];\r\n                                    selected.map(val => {\r\n                                         hobbies.map(obj => obj.value == val && arr.push(obj.title));   \r\n                                    });\r\n                                    return arr.join(', ')\r\n                                 }}\r\n\r\n                                >\r\n                                {hobbies.map(obj => (\r\n                                    <MenuItem value={obj.value}>\r\n                                    <Checkbox checked={props.value.indexOf(obj.value) > -1} />\r\n                                    <ListItemText primary={obj.title} />\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>}} />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    Submit\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={() => reset()}>\r\n                    Reset\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n\r\n    )\r\n}\r\n","D:\\temple\\client\\src\\containers\\muiGrid\\muiGrid.jsx",["238","239","240","241"],{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","severity":1,"message":"247","line":5,"column":8,"nodeType":"248","messageId":"249","endLine":5,"endColumn":25},{"ruleId":"246","severity":1,"message":"250","line":5,"column":8,"nodeType":"248","messageId":"249","endLine":5,"endColumn":22},{"ruleId":"246","severity":1,"message":"251","line":5,"column":8,"nodeType":"248","messageId":"249","endLine":5,"endColumn":21},{"ruleId":"246","severity":1,"message":"252","line":1,"column":16,"nodeType":"248","messageId":"249","endLine":1,"endColumn":24},{"ruleId":"246","severity":1,"message":"253","line":20,"column":12,"nodeType":"248","messageId":"249","endLine":20,"endColumn":21},{"ruleId":"246","severity":1,"message":"254","line":21,"column":12,"nodeType":"248","messageId":"249","endLine":21,"endColumn":19},{"ruleId":"246","severity":1,"message":"255","line":47,"column":11,"nodeType":"248","messageId":"249","endLine":47,"endColumn":23},{"ruleId":"246","severity":1,"message":"256","line":57,"column":11,"nodeType":"248","messageId":"249","endLine":57,"endColumn":19},{"ruleId":"257","severity":1,"message":"258","line":63,"column":57,"nodeType":"259","messageId":"260","endLine":63,"endColumn":59},{"ruleId":"261","severity":1,"message":"262","line":12,"column":8,"nodeType":"263","endLine":12,"endColumn":10,"suggestions":"264"},{"ruleId":"246","severity":1,"message":"265","line":5,"column":8,"nodeType":"248","messageId":"249","endLine":5,"endColumn":21},{"ruleId":"261","severity":1,"message":"262","line":13,"column":8,"nodeType":"263","endLine":13,"endColumn":10,"suggestions":"266"},{"ruleId":"257","severity":1,"message":"258","line":27,"column":53,"nodeType":"259","messageId":"260","endLine":27,"endColumn":55},{"ruleId":"261","severity":1,"message":"262","line":13,"column":8,"nodeType":"263","endLine":13,"endColumn":10,"suggestions":"267"},{"ruleId":"257","severity":1,"message":"258","line":18,"column":55,"nodeType":"259","messageId":"260","endLine":18,"endColumn":57},{"ruleId":"246","severity":1,"message":"268","line":11,"column":5,"nodeType":"248","messageId":"249","endLine":11,"endColumn":18},{"ruleId":"246","severity":1,"message":"269","line":13,"column":5,"nodeType":"248","messageId":"249","endLine":13,"endColumn":19},{"ruleId":"246","severity":1,"message":"270","line":36,"column":40,"nodeType":"248","messageId":"249","endLine":36,"endColumn":48},{"ruleId":"246","severity":1,"message":"271","line":7,"column":21,"nodeType":"248","messageId":"249","endLine":7,"endColumn":31},{"ruleId":"257","severity":1,"message":"272","line":41,"column":25,"nodeType":"259","messageId":"260","endLine":41,"endColumn":27},{"ruleId":"257","severity":1,"message":"272","line":48,"column":30,"nodeType":"259","messageId":"260","endLine":48,"endColumn":32},{"ruleId":"261","severity":1,"message":"273","line":62,"column":8,"nodeType":"263","endLine":62,"endColumn":26,"suggestions":"274"},{"ruleId":"246","severity":1,"message":"275","line":8,"column":22,"nodeType":"248","messageId":"249","endLine":8,"endColumn":26},{"ruleId":"246","severity":1,"message":"255","line":8,"column":36,"nodeType":"248","messageId":"249","endLine":8,"endColumn":48},{"ruleId":"276","severity":1,"message":"277","line":13,"column":24,"nodeType":"278","endLine":13,"endColumn":145},{"ruleId":"257","severity":1,"message":"272","line":13,"column":103,"nodeType":"259","messageId":"260","endLine":13,"endColumn":105},{"ruleId":"246","severity":1,"message":"279","line":23,"column":35,"nodeType":"248","messageId":"249","endLine":23,"endColumn":47},{"ruleId":"257","severity":1,"message":"272","line":28,"column":81,"nodeType":"259","messageId":"260","endLine":28,"endColumn":83},{"ruleId":"257","severity":1,"message":"272","line":34,"column":82,"nodeType":"259","messageId":"260","endLine":34,"endColumn":84},{"ruleId":"261","severity":1,"message":"280","line":11,"column":8,"nodeType":"263","endLine":11,"endColumn":21,"suggestions":"281"},{"ruleId":"246","severity":1,"message":"282","line":3,"column":13,"nodeType":"248","messageId":"249","endLine":3,"endColumn":18},{"ruleId":"283","severity":1,"message":"284","line":7,"column":1,"nodeType":"285","endLine":17,"endColumn":2},{"ruleId":"246","severity":1,"message":"286","line":19,"column":19,"nodeType":"248","messageId":"249","endLine":19,"endColumn":22},{"ruleId":"246","severity":1,"message":"287","line":4,"column":10,"nodeType":"248","messageId":"249","endLine":4,"endColumn":16},{"ruleId":"246","severity":1,"message":"287","line":2,"column":10,"nodeType":"248","messageId":"249","endLine":2,"endColumn":16},{"ruleId":"246","severity":1,"message":"288","line":2,"column":68,"nodeType":"248","messageId":"249","endLine":2,"endColumn":78},{"ruleId":"246","severity":1,"message":"289","line":6,"column":3,"nodeType":"248","messageId":"249","endLine":6,"endColumn":21},{"ruleId":"246","severity":1,"message":"270","line":12,"column":26,"nodeType":"248","messageId":"249","endLine":12,"endColumn":34},{"ruleId":"246","severity":1,"message":"290","line":12,"column":36,"nodeType":"248","messageId":"249","endLine":12,"endColumn":42},{"ruleId":"246","severity":1,"message":"291","line":12,"column":44,"nodeType":"248","messageId":"249","endLine":12,"endColumn":49},{"ruleId":"292","severity":1,"message":"293","line":296,"column":54,"nodeType":"294","messageId":"295","endLine":296,"endColumn":56},{"ruleId":"257","severity":1,"message":"272","line":297,"column":71,"nodeType":"259","messageId":"260","endLine":297,"endColumn":73},{"ruleId":"246","severity":1,"message":"296","line":2,"column":14,"nodeType":"248","messageId":"249","endLine":2,"endColumn":19},{"ruleId":"246","severity":1,"message":"297","line":2,"column":165,"nodeType":"248","messageId":"249","endLine":2,"endColumn":168},{"ruleId":"246","severity":1,"message":"289","line":7,"column":3,"nodeType":"248","messageId":"249","endLine":7,"endColumn":21},{"ruleId":"246","severity":1,"message":"298","line":10,"column":10,"nodeType":"248","messageId":"249","endLine":10,"endColumn":17},"no-native-reassign",["299"],"no-negated-in-lhs",["300"],"no-unused-vars","'EditUserVazhippad' is defined but never used.","Identifier","unusedVar","'EditFamilyInfo' is defined but never used.","'EditVazhippad' is defined but never used.","'Fragment' is defined but never used.","'isLoading' is assigned a value but never used.","'options' is assigned a value but never used.","'handleSearch' is assigned a value but never used.","'filterBy' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["301"],"'axiosInstance' is defined but never used.",["302"],["303"],"'ThemeProvider' is defined but never used.","'createMuiTheme' is defined but never used.","'register' is assigned a value but never used.","'setPerPage' is assigned a value but never used.","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'getResults'. Either include it or remove the dependency array.",["304"],"'page' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'totalResults' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. Outer scope values like 'useDispatch' aren't valid dependencies because mutating them doesn't re-render the component.",["305"],"'Types' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'res' is assigned a value but never used.","'render' is defined but never used.","'InputLabel' is defined but never used.","'KeyboardTimePicker' is defined but never used.","'errors' is assigned a value but never used.","'watch' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Paper' is defined but never used.","'Box' is defined but never used.","'spacing' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"306","fix":"307"},{"desc":"306","fix":"308"},{"desc":"306","fix":"309"},{"desc":"310","fix":"311"},{"desc":"306","fix":"312"},"Update the dependencies array to be: [dispatch]",{"range":"313","text":"314"},{"range":"315","text":"314"},{"range":"316","text":"314"},"Update the dependencies array to be: [filter, sort, page, getResults]",{"range":"317","text":"318"},{"range":"319","text":"314"},[502,504],"[dispatch]",[519,521],[490,492],[1936,1954],"[filter, sort, page, getResults]",[383,396]]